interface OllamaConfig {\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  endpoint: string;\n}\n\ninterface GenerateRequest {\n  model: string;\n  prompt: string;\n  temperature: number;\n  max_tokens: number;\n  stream: boolean;\n}\n\nconst CODE_GENERATION_PROMPT = `\nYou are an expert React/Next.js developer. Your task is to generate complete, production-ready React applications based on user input.\n\nWhen given a URL, analyze its structure and create a similar application.\nWhen given a description, create a full application that matches the requirements.\n\nGUIDELINES:\n- Always generate complete, functional React components\n- Use modern React hooks (useState, useEffect, etc.)\n- Include proper TypeScript types\n- Use Tailwind CSS for styling\n- Make components responsive and accessible\n- Include proper error handling\n- Add realistic sample data where needed\n- Structure code with clean, readable components\n- Use proper semantic HTML\n- Include hover effects and smooth transitions\n\nFORMAT:\n- Return only the React component code\n- Start with necessary imports\n- Export the main component as default\n- Include JSX that renders the complete application\n- Make sure the code is syntactically correct\n\nEXAMPLE STRUCTURE:\n\\`\\`\\`tsx\nimport React, { useState, useEffect } from 'react';\n\ninterface Props {\n  // Define props if needed\n}\n\nexport default function App() {\n  const [state, setState] = useState();\n  \n  // Component logic here\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Your JSX here */}\n    </div>\n  );\n}\n\\`\\`\\`\n\nUser Request: `;\n\nexport async function generateCode(
  input: string, 
  config: OllamaConfig, 
  onProgress?: (chunk: string) => void
): Promise<string> {\n  try {\n    // Check if input is a URL\n    const isUrl = input.startsWith('http://') || input.startsWith('https://');\n    \n    let prompt = CODE_GENERATION_PROMPT;\n    \n    if (isUrl) {\n      prompt += `\\n\\nURL to analyze and recreate: ${input}\\n\\nCreate a React application that mimics the structure, design, and functionality of this website.`;\n    } else {\n      prompt += `\\n\\nDescription: ${input}\\n\\nCreate a complete React application based on this description.`;\n    }\n    \n    // Add specific instructions for common requests\n    if (input.toLowerCase().includes('portfolio')) {\n      prompt += `\\n\\nMake sure to include: header navigation, hero section, projects/work section, about section, contact form, and footer.`;\n    } else if (input.toLowerCase().includes('dashboard')) {\n      prompt += `\\n\\nMake sure to include: sidebar navigation, main content area, data visualization, cards with metrics, and responsive layout.`;\n    } else if (input.toLowerCase().includes('landing')) {\n      prompt += `\\n\\nMake sure to include: hero section, features section, testimonials, pricing, and call-to-action buttons.`;\n    }\n    \n    const response = await fetch(`${config.endpoint}/api/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: config.model,\n        prompt,\n        temperature: config.temperature,\n        max_tokens: config.maxTokens,\n        stream: !!onProgress\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    let generatedCode = data.response || '';\n    \n    // Extract code from markdown code blocks if present\n    const codeBlockRegex = /```(?:tsx?|jsx?)?\\s*\\n([\\s\\S]*?)\\n```/g;\n    const matches = generatedCode.match(codeBlockRegex);\n    \n    if (matches && matches.length > 0) {\n      // Get the largest code block (most likely the main component)\n      const codeBlocks = matches.map(match => {\n        return match.replace(/```(?:tsx?|jsx?)?\\s*\\n/, '').replace(/\\n```$/, '');\n      });\n      \n      generatedCode = codeBlocks.reduce((longest, current) => \n        current.length > longest.length ? current : longest\n      );\n    }\n    \n    // Clean up the code\n    generatedCode = generatedCode.trim();\n    \n    // Ensure the code has proper imports if missing\n    if (!generatedCode.includes('import React') && !generatedCode.includes('import {')) {\n      generatedCode = `import React, { useState, useEffect } from 'react';\\n\\n${generatedCode}`;\n    }\n    \n    // Ensure there's a default export\n    if (!generatedCode.includes('export default')) {\n      // Try to find a component and add export\n      const componentMatch = generatedCode.match(/(?:function|const)\\s+(\\w+)\\s*(?:\\(|=)/);;\n      if (componentMatch) {\n        generatedCode += `\\n\\nexport default ${componentMatch[1]};`;\n      }\n    }\n    \n    return generatedCode;\n  } catch (error) {\n    console.error('Code generation error:', error);\n    \n    // Return a fallback component if generation fails\n    return `import React from 'react';\n\nexport default function App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"max-w-md mx-auto text-center p-8\">\n        <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n          Generation Failed\n        </h1>\n        <p className=\"text-gray-600 mb-6\">\n          Unable to generate code. Please check your Ollama connection and try again.\n        </p>\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-sm text-red-800\">\n            Error: ${error instanceof Error ? error.message : 'Unknown error'}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}`;\n  }\n}\n\n// Function to test Ollama connection\nexport async function testOllamaConnection(endpoint: string): Promise<boolean> {\n  try {\n    const response = await fetch(`${endpoint}/api/tags`);\n    return response.ok;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Function to get available models\nexport async function getAvailableModels(endpoint: string): Promise<string[]> {\n  try {\n    const response = await fetch(`${endpoint}/api/tags`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch models');\n    }\n    \n    const data = await response.json();\n    return data.models?.map((model: any) => model.name) || [];\n  } catch (error) {\n    console.error('Failed to get available models:', error);\n    return [];\n  }\n}