interface OllamaConfig {\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  endpoint: string;\n}\n\nconst CODE_GENERATION_PROMPT = `\nYou are an expert React/Next.js developer. Your task is to generate complete, production-ready React applications based on user input.\n\nWhen given a URL, analyze its structure and create a similar application.\nWhen given a description, create a full application that matches the requirements.\n\nGUIDELINES:\n- Always generate complete, functional React components\n- Use modern React hooks (useState, useEffect, etc.)\n- Include proper TypeScript types\n- Use Tailwind CSS for styling\n- Make components responsive and accessible\n- Include proper error handling\n- Add realistic sample data where needed\n- Structure code with clean, readable components\n- Use proper semantic HTML\n- Include hover effects and smooth transitions\n\nFORMAT:\n- Return only the React component code\n- Start with necessary imports\n- Export the main component as default\n- Include JSX that renders the complete application\n- Make sure the code is syntactically correct\n\nEXAMPLE STRUCTURE:\n\\`\\`\\`tsx\nimport React, { useState, useEffect } from 'react';\n\ninterface Props {\n  // Define props if needed\n}\n\nexport default function App() {\n  const [state, setState] = useState();\n  \n  // Component logic here\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Your JSX here */}\n    </div>\n  );\n}\n\\`\\`\\`\n\nUser Request: `;\n\n// Generate code with streaming support\nexport async function generateCodeStreaming(\n  input: string,\n  config: OllamaConfig,\n  onProgress: (chunk: string, fullText: string) => void\n): Promise<string> {\n  try {\n    const isUrl = input.startsWith('http://') || input.startsWith('https://');\n    let prompt = CODE_GENERATION_PROMPT;\n    \n    if (isUrl) {\n      prompt += `\\n\\nURL to analyze and recreate: ${input}\\n\\nCreate a React application that mimics the structure, design, and functionality of this website.`;\n    } else {\n      prompt += `\\n\\nDescription: ${input}\\n\\nCreate a complete React application based on this description.`;\n    }\n    \n    if (input.toLowerCase().includes('portfolio')) {\n      prompt += `\\n\\nMake sure to include: header navigation, hero section, projects/work section, about section, contact form, and footer.`;\n    } else if (input.toLowerCase().includes('dashboard')) {\n      prompt += `\\n\\nMake sure to include: sidebar navigation, main content area, data visualization, cards with metrics, and responsive layout.`;\n    } else if (input.toLowerCase().includes('landing')) {\n      prompt += `\\n\\nMake sure to include: hero section, features section, testimonials, pricing, and call-to-action buttons.`;\n    }\n    \n    const response = await fetch(`${config.endpoint}/api/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: config.model,\n        prompt,\n        temperature: config.temperature,\n        max_tokens: config.maxTokens,\n        stream: true\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\n    }\n    \n    let generatedCode = '';\n    \n    if (response.body) {\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      \n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          \n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n').filter(line => line.trim());\n          \n          for (const line of lines) {\n            try {\n              const data = JSON.parse(line);\n              if (data.response) {\n                generatedCode += data.response;\n                onProgress(data.response, generatedCode);\n              }\n            } catch (e) {\n              // Ignore invalid JSON lines\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }\n    \n    // Process the final code\n    return processGeneratedCode(generatedCode);\n  } catch (error) {\n    console.error('Streaming code generation error:', error);\n    throw error;\n  }\n}\n\n// Process and clean up generated code\nfunction processGeneratedCode(code: string): string {\n  let generatedCode = code;\n  \n  // Extract code from markdown code blocks if present\n  const codeBlockRegex = /```(?:tsx?|jsx?)?\\s*\\n([\\s\\S]*?)\\n```/g;\n  const matches = generatedCode.match(codeBlockRegex);\n  \n  if (matches && matches.length > 0) {\n    const codeBlocks = matches.map(match => {\n      return match.replace(/```(?:tsx?|jsx?)?\\s*\\n/, '').replace(/\\n```$/, '');\n    });\n    generatedCode = codeBlocks.reduce((longest, current) => \n      current.length > longest.length ? current : longest\n    );\n  }\n  \n  generatedCode = generatedCode.trim();\n  \n  // Ensure the code has proper imports if missing\n  if (!generatedCode.includes('import React') && !generatedCode.includes('import {')) {\n    generatedCode = `import React, { useState, useEffect } from 'react';\\n\\n${generatedCode}`;\n  }\n  \n  // Ensure there's a default export\n  if (!generatedCode.includes('export default')) {\n    const componentMatch = generatedCode.match(/(?:function|const)\\s+(\\w+)\\s*(?:\\(|=)/);\n    if (componentMatch) {\n      generatedCode += `\\n\\nexport default ${componentMatch[1]};`;\n    }\n  }\n  \n  return generatedCode;\n}\n\n// Generate code without streaming (fallback)\nexport async function generateCodeFallback(\n  input: string,\n  config: OllamaConfig\n): Promise<string> {\n  try {\n    const isUrl = input.startsWith('http://') || input.startsWith('https://');\n    let prompt = CODE_GENERATION_PROMPT;\n    \n    if (isUrl) {\n      prompt += `\\n\\nURL to analyze and recreate: ${input}\\n\\nCreate a React application that mimics the structure, design, and functionality of this website.`;\n    } else {\n      prompt += `\\n\\nDescription: ${input}\\n\\nCreate a complete React application based on this description.`;\n    }\n    \n    const response = await fetch(`${config.endpoint}/api/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: config.model,\n        prompt,\n        temperature: config.temperature,\n        max_tokens: config.maxTokens,\n        stream: false\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    const generatedCode = data.response || '';\n    \n    return processGeneratedCode(generatedCode);\n  } catch (error) {\n    console.error('Fallback code generation error:', error);\n    throw error;\n  }\n}