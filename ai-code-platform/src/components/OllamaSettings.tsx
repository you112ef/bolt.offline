import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Settings, Zap, Thermometer, Hash, Globe, CheckCircle, XCircle } from 'lucide-react';\nimport { useState, useEffect } from 'react';\n\ninterface OllamaConfig {\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  endpoint: string;\n}\n\ninterface OllamaSettingsProps {\n  config: OllamaConfig;\n  onConfigChange: (config: OllamaConfig) => void;\n}\n\nexport default function OllamaSettings({ config, onConfigChange }: OllamaSettingsProps) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isChecking, setIsChecking] = useState(false);\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n\n  const defaultModels = [\n    'mistral',\n    'llama3',\n    'llama3.1',\n    'codellama',\n    'openhermes',\n    'phi3',\n    'gemma',\n    'qwen2'\n  ];\n\n  useEffect(() => {\n    checkConnection();\n  }, [config.endpoint]);\n\n  const checkConnection = async () => {\n    setIsChecking(true);\n    try {\n      const response = await fetch(`${config.endpoint}/api/tags`);\n      if (response.ok) {\n        const data = await response.json();\n        setAvailableModels(data.models?.map((m: any) => m.name) || []);\n        setIsConnected(true);\n      } else {\n        setIsConnected(false);\n        setAvailableModels([]);\n      }\n    } catch (error) {\n      setIsConnected(false);\n      setAvailableModels([]);\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const handleConfigChange = (key: keyof OllamaConfig, value: any) => {\n    onConfigChange({ ...config, [key]: value });\n  };\n\n  const modelOptions = availableModels.length > 0 ? availableModels : defaultModels;\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5 text-primary\" />\n            <h2 className=\"font-semibold\">Ollama Settings</h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {isConnected ? (\n              <Badge variant=\"default\" className=\"bg-green-500\">\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                Connected\n              </Badge>\n            ) : (\n              <Badge variant=\"destructive\">\n                <XCircle className=\"h-3 w-3 mr-1\" />\n                Disconnected\n              </Badge>\n            )}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={checkConnection}\n              disabled={isChecking}\n            >\n              {isChecking ? 'Checking...' : 'Test'}\n            </Button>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Endpoint */}\n        <div className=\"space-y-2\">\n          <Label className=\"flex items-center gap-2\">\n            <Globe className=\"h-4 w-4\" />\n            Ollama Endpoint\n          </Label>\n          <Input\n            value={config.endpoint}\n            onChange={(e) => handleConfigChange('endpoint', e.target.value)}\n            placeholder=\"http://localhost:11434\"\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Make sure Ollama is running and accessible at this URL\n          </p>\n        </div>\n\n        {/* Model Selection */}\n        <div className=\"space-y-2\">\n          <Label className=\"flex items-center gap-2\">\n            <Zap className=\"h-4 w-4\" />\n            Model\n          </Label>\n          <Select\n            value={config.model}\n            onValueChange={(value) => handleConfigChange('model', value)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select a model\" />\n            </SelectTrigger>\n            <SelectContent>\n              {modelOptions.map((model) => (\n                <SelectItem key={model} value={model}>\n                  <div className=\"flex items-center gap-2\">\n                    <span>{model}</span>\n                    {availableModels.includes(model) && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Available\n                      </Badge>\n                    )}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <p className=\"text-xs text-muted-foreground\">\n            {availableModels.length > 0 \n              ? `${availableModels.length} models available locally`\n              : 'No models detected. Run \"ollama pull <model>\" to download.'}\n          </p>\n        </div>\n\n        {/* Temperature */}\n        <div className=\"space-y-3\">\n          <Label className=\"flex items-center gap-2\">\n            <Thermometer className=\"h-4 w-4\" />\n            Temperature: {config.temperature}\n          </Label>\n          <Slider\n            value={[config.temperature]}\n            onValueChange={([value]) => handleConfigChange('temperature', value)}\n            min={0}\n            max={2}\n            step={0.1}\n            className=\"w-full\"\n          />\n          <div className=\"flex justify-between text-xs text-muted-foreground\">\n            <span>Focused (0.0)</span>\n            <span>Balanced (1.0)</span>\n            <span>Creative (2.0)</span>\n          </div>\n        </div>\n\n        {/* Max Tokens */}\n        <div className=\"space-y-3\">\n          <Label className=\"flex items-center gap-2\">\n            <Hash className=\"h-4 w-4\" />\n            Max Tokens: {config.maxTokens}\n          </Label>\n          <Slider\n            value={[config.maxTokens]}\n            onValueChange={([value]) => handleConfigChange('maxTokens', value)}\n            min={1000}\n            max={8000}\n            step={500}\n            className=\"w-full\"\n          />\n          <div className=\"flex justify-between text-xs text-muted-foreground\">\n            <span>1K</span>\n            <span>4K</span>\n            <span>8K</span>\n          </div>\n        </div>\n\n        {/* Quick Setup */}\n        <div className=\"space-y-3\">\n          <Label>Quick Setup</Label>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                onConfigChange({\n                  ...config,\n                  temperature: 0.3,\n                  maxTokens: 3000\n                });\n              }}\n            >\n              Precise Code\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                onConfigChange({\n                  ...config,\n                  temperature: 0.7,\n                  maxTokens: 4000\n                });\n              }}\n            >\n              Balanced\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                onConfigChange({\n                  ...config,\n                  temperature: 1.0,\n                  maxTokens: 5000\n                });\n              }}\n            >\n              Creative\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                onConfigChange({\n                  ...config,\n                  temperature: 0.1,\n                  maxTokens: 6000\n                });\n              }}\n            >\n              Max Length\n            </Button>\n          </div>\n        </div>\n\n        {!isConnected && (\n          <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n            <div className=\"text-sm space-y-2\">\n              <p className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                Ollama Not Connected\n              </p>\n              <p className=\"text-yellow-700 dark:text-yellow-300\">\n                Make sure Ollama is running:\n              </p>\n              <code className=\"block bg-yellow-100 dark:bg-yellow-900/40 p-2 rounded text-xs font-mono\">\n                ollama serve\n              </code>\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}