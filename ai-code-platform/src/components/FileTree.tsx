import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  FileCode2, \n  Folder, \n  FolderOpen, \n  Plus, \n  Trash2, \n  Download,\n  Edit3,\n  ChevronRight,\n  ChevronDown\n} from 'lucide-react';\n\ninterface FileNode {\n  name: string;\n  type: 'file' | 'folder';\n  content?: string;\n  children?: FileNode[];\n  expanded?: boolean;\n}\n\ninterface FileTreeProps {\n  files: FileNode[];\n  onFileSelect: (file: FileNode, path: string) => void;\n  onFileCreate: (path: string, type: 'file' | 'folder') => void;\n  onFileDelete: (path: string) => void;\n  selectedFile?: string;\n}\n\nexport default function FileTree({ \n  files, \n  onFileSelect, \n  onFileCreate, \n  onFileDelete, \n  selectedFile \n}: FileTreeProps) {\n  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set(['src']));\n  const [editingFile, setEditingFile] = useState<string | null>(null);\n  const [newFileName, setNewFileName] = useState('');\n\n  const toggleFolder = (path: string) => {\n    const newExpanded = new Set(expandedFolders);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n    }\n    setExpandedFolders(newExpanded);\n  };\n\n  const getFileIcon = (name: string, type: 'file' | 'folder') => {\n    if (type === 'folder') {\n      return expandedFolders.has(name) ? \n        <FolderOpen className=\"h-4 w-4 text-blue-500\" /> : \n        <Folder className=\"h-4 w-4 text-blue-500\" />;\n    }\n    \n    if (name.endsWith('.tsx') || name.endsWith('.ts')) {\n      return <FileCode2 className=\"h-4 w-4 text-blue-600\" />;\n    }\n    if (name.endsWith('.css') || name.endsWith('.scss')) {\n      return <FileCode2 className=\"h-4 w-4 text-pink-600\" />;\n    }\n    if (name.endsWith('.json')) {\n      return <FileCode2 className=\"h-4 w-4 text-yellow-600\" />;\n    }\n    return <FileCode2 className=\"h-4 w-4 text-gray-600\" />;\n  };\n\n  const renderNode = (node: FileNode, path: string, depth: number = 0) => {\n    const fullPath = path ? `${path}/${node.name}` : node.name;\n    const isSelected = selectedFile === fullPath;\n    const isExpanded = expandedFolders.has(fullPath);\n\n    return (\n      <div key={fullPath}>\n        <div \n          className={`\n            flex items-center gap-1 px-2 py-1 text-sm cursor-pointer hover:bg-muted/50 \n            ${isSelected ? 'bg-primary/10 text-primary' : ''}\n          `}\n          style={{ paddingLeft: `${depth * 12 + 8}px` }}\n          onClick={() => {\n            if (node.type === 'folder') {\n              toggleFolder(fullPath);\n            } else {\n              onFileSelect(node, fullPath);\n            }\n          }}\n        >\n          {node.type === 'folder' && (\n            <div className=\"w-4 flex justify-center\">\n              {isExpanded ? \n                <ChevronDown className=\"h-3 w-3\" /> : \n                <ChevronRight className=\"h-3 w-3\" />\n              }\n            </div>\n          )}\n          \n          {getFileIcon(node.name, node.type)}\n          \n          <span className=\"flex-1 truncate\">{node.name}</span>\n          \n          {node.type === 'file' && (\n            <div className=\"opacity-0 group-hover:opacity-100 flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-5 w-5 p-0\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setEditingFile(fullPath);\n                  setNewFileName(node.name);\n                }}\n              >\n                <Edit3 className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-5 w-5 p-0 text-destructive\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onFileDelete(fullPath);\n                }}\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        {node.type === 'folder' && isExpanded && node.children && (\n          <div>\n            {node.children.map(child => \n              renderNode(child, fullPath, depth + 1)\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <div className=\"border-b border-border/50 p-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm font-medium\">Project Files</span>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onFileCreate('', 'file')}\n              className=\"h-6 px-2\"\n            >\n              <Plus className=\"h-3 w-3 mr-1\" />\n              File\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onFileCreate('', 'folder')}\n              className=\"h-6 px-2\"\n            >\n              <Plus className=\"h-3 w-3 mr-1\" />\n              Folder\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-2 space-y-1\">\n          {files.map(file => renderNode(file, '', 0))}\n        </div>\n      </ScrollArea>\n      \n      <div className=\"border-t border-border/50 p-2\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full\"\n          onClick={() => {\n            // Download entire project structure\n            console.log('Download project');\n          }}\n        >\n          <Download className=\"h-3 w-3 mr-2\" />\n          Download Project\n        </Button>\n      </div>\n    </Card>\n  );\n}