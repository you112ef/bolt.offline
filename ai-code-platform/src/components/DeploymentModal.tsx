import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Card } from '@/components/ui/card';\nimport { \n  Copy, \n  ExternalLink, \n  CheckCircle, \n  Terminal, \n  Github, \n  Globe,\n  Download,\n  Rocket,\n  Code,\n  Zap\n} from 'lucide-react';\n\ninterface DeploymentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  platform: 'vercel' | 'netlify' | 'github';\n  projectName: string;\n  projectId: string;\n}\n\nexport default function DeploymentModal({ \n  open, \n  onOpenChange, \n  platform, \n  projectName,\n  projectId \n}: DeploymentModalProps) {\n  const [copiedStep, setCopiedStep] = useState<string | null>(null);\n  \n  const safeProjectName = projectName.toLowerCase().replace(/\\s+/g, '-');\n  const deploymentUrl = platform === 'github' \n    ? `https://github.com/your-username/${safeProjectName}`\n    : `https://${safeProjectName}-${projectId.slice(0, 8)}.${platform}.app`;\n\n  const copyToClipboard = (text: string, stepId: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedStep(stepId);\n    setTimeout(() => setCopiedStep(null), 2000);\n  };\n\n  const getDeploymentSteps = () => {\n    if (platform === 'vercel') {\n      return {\n        cli: [\n          {\n            id: 'install-vercel',\n            title: 'Install Vercel CLI',\n            command: 'npm i -g vercel',\n            description: 'Install the Vercel command line interface globally'\n          },\n          {\n            id: 'extract-project',\n            title: 'Extract Project',\n            command: `cd ${safeProjectName}`,\n            description: 'Navigate to your extracted project directory'\n          },\n          {\n            id: 'install-deps',\n            title: 'Install Dependencies',\n            command: 'npm install',\n            description: 'Install all project dependencies'\n          },\n          {\n            id: 'deploy',\n            title: 'Deploy to Vercel',\n            command: 'vercel --prod',\n            description: 'Deploy your application to Vercel production'\n          }\n        ],\n        github: [\n          {\n            id: 'create-repo',\n            title: 'Create GitHub Repository',\n            command: `gh repo create ${safeProjectName} --public`,\n            description: 'Create a new public repository on GitHub'\n          },\n          {\n            id: 'git-init',\n            title: 'Initialize Git',\n            command: `git init && git add . && git commit -m \"Initial commit\"`,\n            description: 'Initialize git and make your first commit'\n          },\n          {\n            id: 'push-code',\n            title: 'Push to GitHub',\n            command: `git remote add origin https://github.com/YOUR_USERNAME/${safeProjectName}.git && git push -u origin main`,\n            description: 'Push your code to the GitHub repository'\n          },\n          {\n            id: 'connect-vercel',\n            title: 'Connect to Vercel',\n            command: 'vercel --prod',\n            description: 'Import your GitHub repository in Vercel dashboard'\n          }\n        ]\n      };\n    } else if (platform === 'netlify') {\n      return {\n        cli: [\n          {\n            id: 'install-netlify',\n            title: 'Install Netlify CLI',\n            command: 'npm i -g netlify-cli',\n            description: 'Install the Netlify command line interface globally'\n          },\n          {\n            id: 'extract-project',\n            title: 'Extract Project',\n            command: `cd ${safeProjectName}`,\n            description: 'Navigate to your extracted project directory'\n          },\n          {\n            id: 'install-deps',\n            title: 'Install Dependencies',\n            command: 'npm install',\n            description: 'Install all project dependencies'\n          },\n          {\n            id: 'build-project',\n            title: 'Build Project',\n            command: 'npm run build',\n            description: 'Build your application for production'\n          },\n          {\n            id: 'deploy',\n            title: 'Deploy to Netlify',\n            command: 'netlify deploy --prod --dir=dist',\n            description: 'Deploy your built application to Netlify'\n          }\n        ],\n        github: [\n          {\n            id: 'create-repo',\n            title: 'Create GitHub Repository',\n            command: `gh repo create ${safeProjectName} --public`,\n            description: 'Create a new public repository on GitHub'\n          },\n          {\n            id: 'git-init',\n            title: 'Initialize Git',\n            command: `git init && git add . && git commit -m \"Initial commit\"`,\n            description: 'Initialize git and make your first commit'\n          },\n          {\n            id: 'push-code',\n            title: 'Push to GitHub',\n            command: `git remote add origin https://github.com/YOUR_USERNAME/${safeProjectName}.git && git push -u origin main`,\n            description: 'Push your code to the GitHub repository'\n          },\n          {\n            id: 'connect-netlify',\n            title: 'Connect to Netlify',\n            command: 'Open Netlify dashboard and import your GitHub repository',\n            description: 'Set build command: npm run build, publish directory: dist'\n          }\n        ]\n      };\n    } else {\n      return {\n        cli: [\n          {\n            id: 'install-gh-cli',\n            title: 'Install GitHub CLI',\n            command: 'brew install gh  # macOS\\nwinget install GitHub.cli  # Windows',\n            description: 'Install GitHub CLI for easy repository management'\n          },\n          {\n            id: 'extract-project',\n            title: 'Extract Project',\n            command: `cd ${safeProjectName}`,\n            description: 'Navigate to your extracted project directory'\n          },\n          {\n            id: 'git-init',\n            title: 'Initialize Repository',\n            command: `git init && git add . && git commit -m \"Initial commit\"`,\n            description: 'Initialize git and make your first commit'\n          },\n          {\n            id: 'create-repo',\n            title: 'Create & Push Repository',\n            command: `gh repo create ${safeProjectName} --public --source=. --remote=origin --push`,\n            description: 'Create GitHub repository and push your code'\n          }\n        ],\n        manual: [\n          {\n            id: 'goto-github',\n            title: 'Go to GitHub',\n            command: 'https://github.com/new',\n            description: 'Create a new repository on GitHub.com'\n          },\n          {\n            id: 'git-setup',\n            title: 'Setup Git Repository',\n            command: `git init\\ngit add .\\ngit commit -m \"Initial commit\"\\ngit branch -M main`,\n            description: 'Initialize and setup your local git repository'\n          },\n          {\n            id: 'connect-remote',\n            title: 'Connect to GitHub',\n            command: `git remote add origin https://github.com/YOUR_USERNAME/${safeProjectName}.git\\ngit push -u origin main`,\n            description: 'Connect your local repository to GitHub'\n          }\n        ]\n      };\n    }\n  };\n\n  const steps = getDeploymentSteps();\n  const platformIcon = platform === 'vercel' ? <Zap className=\"h-5 w-5\" /> : \n                      platform === 'netlify' ? <Globe className=\"h-5 w-5\" /> : \n                      <Github className=\"h-5 w-5\" />;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            {platformIcon}\n            Deploy to {platform.charAt(0).toUpperCase() + platform.slice(1)}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Expected URL */}\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"font-medium\">Expected URL</h4>\n                <p className=\"text-sm text-muted-foreground\">Your app will be available at:</p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <code className=\"bg-muted px-2 py-1 rounded text-sm\">{deploymentUrl}</code>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(deploymentUrl, 'url')}\n                >\n                  {copiedStep === 'url' ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n          </Card>\n          \n          {/* Deployment Methods */}\n          <Tabs defaultValue={platform === 'github' ? 'cli' : 'cli'}>\n            <TabsList>\n              <TabsTrigger value=\"cli\" className=\"flex items-center gap-2\">\n                <Terminal className=\"h-4 w-4\" />\n                {platform === 'github' ? 'GitHub CLI' : 'CLI Method'}\n              </TabsTrigger>\n              <TabsTrigger value={platform === 'github' ? 'manual' : 'github'} className=\"flex items-center gap-2\">\n                <Github className=\"h-4 w-4\" />\n                {platform === 'github' ? 'Manual Setup' : 'Via GitHub'}\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"cli\" className=\"mt-4\">\n              <ScrollArea className=\"h-[400px] pr-4\">\n                <div className=\"space-y-4\">\n                  {steps.cli.map((step, index) => (\n                    <Card key={step.id} className=\"p-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <Badge variant=\"outline\" className=\"mt-1\">\n                          {index + 1}\n                        </Badge>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium mb-1\">{step.title}</h4>\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            {step.description}\n                          </p>\n                          <div className=\"bg-muted rounded-lg p-3\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <code className=\"text-sm font-mono\">{step.command}</code>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(step.command, step.id)}\n                              >\n                                {copiedStep === step.id ? \n                                  <CheckCircle className=\"h-3 w-3\" /> : \n                                  <Copy className=\"h-3 w-3\" />\n                                }\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n            \n            <TabsContent value={platform === 'github' ? 'manual' : 'github'} className=\"mt-4\">\n              <ScrollArea className=\"h-[400px] pr-4\">\n                <div className=\"space-y-4\">\n                  {(platform === 'github' ? steps.manual : steps.github).map((step, index) => (\n                    <Card key={step.id} className=\"p-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <Badge variant=\"outline\" className=\"mt-1\">\n                          {index + 1}\n                        </Badge>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium mb-1\">{step.title}</h4>\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            {step.description}\n                          </p>\n                          <div className=\"bg-muted rounded-lg p-3\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              {step.command.startsWith('http') ? (\n                                <div className=\"flex items-center gap-2\">\n                                  <code className=\"text-sm font-mono\">{step.command}</code>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => window.open(step.command, '_blank')}\n                                  >\n                                    <ExternalLink className=\"h-3 w-3\" />\n                                  </Button>\n                                </div>\n                              ) : (\n                                <>\n                                  <code className=\"text-sm font-mono whitespace-pre\">{step.command}</code>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => copyToClipboard(step.command, step.id)}\n                                  >\n                                    {copiedStep === step.id ? \n                                      <CheckCircle className=\"h-3 w-3\" /> : \n                                      <Copy className=\"h-3 w-3\" />\n                                    }\n                                  </Button>\n                                </>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n          </Tabs>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"text-sm text-muted-foreground\">\n              Don't forget to download your project ZIP file first!\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                Close\n              </Button>\n              <Button onClick={() => window.open(deploymentUrl, '_blank')}>\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Open {platform.charAt(0).toUpperCase() + platform.slice(1)}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}